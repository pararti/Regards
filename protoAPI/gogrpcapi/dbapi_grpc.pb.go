// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: dbapi.proto

package dbapis

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DBreqClient is the client API for DBreq service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DBreqClient interface {
	GetUser(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*User, error)
	SetUser(ctx context.Context, in *Auth, opts ...grpc.CallOption) (*UserID, error)
	GetSession(ctx context.Context, in *SessionID, opts ...grpc.CallOption) (*Session, error)
	SetSession(ctx context.Context, in *Session, opts ...grpc.CallOption) (*SessionID, error)
	GetMedia(ctx context.Context, in *MediaID, opts ...grpc.CallOption) (*Media, error)
	SetMedia(ctx context.Context, in *Media, opts ...grpc.CallOption) (*MediaID, error)
}

type dBreqClient struct {
	cc grpc.ClientConnInterface
}

func NewDBreqClient(cc grpc.ClientConnInterface) DBreqClient {
	return &dBreqClient{cc}
}

func (c *dBreqClient) GetUser(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/dbapis.DBreq/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBreqClient) SetUser(ctx context.Context, in *Auth, opts ...grpc.CallOption) (*UserID, error) {
	out := new(UserID)
	err := c.cc.Invoke(ctx, "/dbapis.DBreq/SetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBreqClient) GetSession(ctx context.Context, in *SessionID, opts ...grpc.CallOption) (*Session, error) {
	out := new(Session)
	err := c.cc.Invoke(ctx, "/dbapis.DBreq/GetSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBreqClient) SetSession(ctx context.Context, in *Session, opts ...grpc.CallOption) (*SessionID, error) {
	out := new(SessionID)
	err := c.cc.Invoke(ctx, "/dbapis.DBreq/SetSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBreqClient) GetMedia(ctx context.Context, in *MediaID, opts ...grpc.CallOption) (*Media, error) {
	out := new(Media)
	err := c.cc.Invoke(ctx, "/dbapis.DBreq/GetMedia", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBreqClient) SetMedia(ctx context.Context, in *Media, opts ...grpc.CallOption) (*MediaID, error) {
	out := new(MediaID)
	err := c.cc.Invoke(ctx, "/dbapis.DBreq/SetMedia", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DBreqServer is the server API for DBreq service.
// All implementations must embed UnimplementedDBreqServer
// for forward compatibility
type DBreqServer interface {
	GetUser(context.Context, *UserID) (*User, error)
	SetUser(context.Context, *Auth) (*UserID, error)
	GetSession(context.Context, *SessionID) (*Session, error)
	SetSession(context.Context, *Session) (*SessionID, error)
	GetMedia(context.Context, *MediaID) (*Media, error)
	SetMedia(context.Context, *Media) (*MediaID, error)
	mustEmbedUnimplementedDBreqServer()
}

// UnimplementedDBreqServer must be embedded to have forward compatible implementations.
type UnimplementedDBreqServer struct {
}

func (UnimplementedDBreqServer) GetUser(context.Context, *UserID) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedDBreqServer) SetUser(context.Context, *Auth) (*UserID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUser not implemented")
}
func (UnimplementedDBreqServer) GetSession(context.Context, *SessionID) (*Session, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSession not implemented")
}
func (UnimplementedDBreqServer) SetSession(context.Context, *Session) (*SessionID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSession not implemented")
}
func (UnimplementedDBreqServer) GetMedia(context.Context, *MediaID) (*Media, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMedia not implemented")
}
func (UnimplementedDBreqServer) SetMedia(context.Context, *Media) (*MediaID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMedia not implemented")
}
func (UnimplementedDBreqServer) mustEmbedUnimplementedDBreqServer() {}

// UnsafeDBreqServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DBreqServer will
// result in compilation errors.
type UnsafeDBreqServer interface {
	mustEmbedUnimplementedDBreqServer()
}

func RegisterDBreqServer(s grpc.ServiceRegistrar, srv DBreqServer) {
	s.RegisterService(&DBreq_ServiceDesc, srv)
}

func _DBreq_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBreqServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbapis.DBreq/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBreqServer).GetUser(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBreq_SetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Auth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBreqServer).SetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbapis.DBreq/SetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBreqServer).SetUser(ctx, req.(*Auth))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBreq_GetSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBreqServer).GetSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbapis.DBreq/GetSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBreqServer).GetSession(ctx, req.(*SessionID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBreq_SetSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Session)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBreqServer).SetSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbapis.DBreq/SetSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBreqServer).SetSession(ctx, req.(*Session))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBreq_GetMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MediaID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBreqServer).GetMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbapis.DBreq/GetMedia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBreqServer).GetMedia(ctx, req.(*MediaID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBreq_SetMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Media)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBreqServer).SetMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbapis.DBreq/SetMedia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBreqServer).SetMedia(ctx, req.(*Media))
	}
	return interceptor(ctx, in, info, handler)
}

// DBreq_ServiceDesc is the grpc.ServiceDesc for DBreq service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DBreq_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dbapis.DBreq",
	HandlerType: (*DBreqServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUser",
			Handler:    _DBreq_GetUser_Handler,
		},
		{
			MethodName: "SetUser",
			Handler:    _DBreq_SetUser_Handler,
		},
		{
			MethodName: "GetSession",
			Handler:    _DBreq_GetSession_Handler,
		},
		{
			MethodName: "SetSession",
			Handler:    _DBreq_SetSession_Handler,
		},
		{
			MethodName: "GetMedia",
			Handler:    _DBreq_GetMedia_Handler,
		},
		{
			MethodName: "SetMedia",
			Handler:    _DBreq_SetMedia_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dbapi.proto",
}
