// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: dbapi.proto

package golang

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MediaAndSessionClient is the client API for MediaAndSession service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MediaAndSessionClient interface {
	GetSession(ctx context.Context, opts ...grpc.CallOption) (MediaAndSession_GetSessionClient, error)
	SetSession(ctx context.Context, opts ...grpc.CallOption) (MediaAndSession_SetSessionClient, error)
	GetMedia(ctx context.Context, opts ...grpc.CallOption) (MediaAndSession_GetMediaClient, error)
	SetMedia(ctx context.Context, opts ...grpc.CallOption) (MediaAndSession_SetMediaClient, error)
}

type mediaAndSessionClient struct {
	cc grpc.ClientConnInterface
}

func NewMediaAndSessionClient(cc grpc.ClientConnInterface) MediaAndSessionClient {
	return &mediaAndSessionClient{cc}
}

func (c *mediaAndSessionClient) GetSession(ctx context.Context, opts ...grpc.CallOption) (MediaAndSession_GetSessionClient, error) {
	stream, err := c.cc.NewStream(ctx, &MediaAndSession_ServiceDesc.Streams[0], "/dbapis.MediaAndSession/GetSession", opts...)
	if err != nil {
		return nil, err
	}
	x := &mediaAndSessionGetSessionClient{stream}
	return x, nil
}

type MediaAndSession_GetSessionClient interface {
	Send(*SessionID) error
	Recv() (*Session, error)
	grpc.ClientStream
}

type mediaAndSessionGetSessionClient struct {
	grpc.ClientStream
}

func (x *mediaAndSessionGetSessionClient) Send(m *SessionID) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mediaAndSessionGetSessionClient) Recv() (*Session, error) {
	m := new(Session)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mediaAndSessionClient) SetSession(ctx context.Context, opts ...grpc.CallOption) (MediaAndSession_SetSessionClient, error) {
	stream, err := c.cc.NewStream(ctx, &MediaAndSession_ServiceDesc.Streams[1], "/dbapis.MediaAndSession/SetSession", opts...)
	if err != nil {
		return nil, err
	}
	x := &mediaAndSessionSetSessionClient{stream}
	return x, nil
}

type MediaAndSession_SetSessionClient interface {
	Send(*Session) error
	Recv() (*SessionID, error)
	grpc.ClientStream
}

type mediaAndSessionSetSessionClient struct {
	grpc.ClientStream
}

func (x *mediaAndSessionSetSessionClient) Send(m *Session) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mediaAndSessionSetSessionClient) Recv() (*SessionID, error) {
	m := new(SessionID)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mediaAndSessionClient) GetMedia(ctx context.Context, opts ...grpc.CallOption) (MediaAndSession_GetMediaClient, error) {
	stream, err := c.cc.NewStream(ctx, &MediaAndSession_ServiceDesc.Streams[2], "/dbapis.MediaAndSession/GetMedia", opts...)
	if err != nil {
		return nil, err
	}
	x := &mediaAndSessionGetMediaClient{stream}
	return x, nil
}

type MediaAndSession_GetMediaClient interface {
	Send(*MediaID) error
	Recv() (*Media, error)
	grpc.ClientStream
}

type mediaAndSessionGetMediaClient struct {
	grpc.ClientStream
}

func (x *mediaAndSessionGetMediaClient) Send(m *MediaID) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mediaAndSessionGetMediaClient) Recv() (*Media, error) {
	m := new(Media)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mediaAndSessionClient) SetMedia(ctx context.Context, opts ...grpc.CallOption) (MediaAndSession_SetMediaClient, error) {
	stream, err := c.cc.NewStream(ctx, &MediaAndSession_ServiceDesc.Streams[3], "/dbapis.MediaAndSession/SetMedia", opts...)
	if err != nil {
		return nil, err
	}
	x := &mediaAndSessionSetMediaClient{stream}
	return x, nil
}

type MediaAndSession_SetMediaClient interface {
	Send(*Media) error
	Recv() (*MediaID, error)
	grpc.ClientStream
}

type mediaAndSessionSetMediaClient struct {
	grpc.ClientStream
}

func (x *mediaAndSessionSetMediaClient) Send(m *Media) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mediaAndSessionSetMediaClient) Recv() (*MediaID, error) {
	m := new(MediaID)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MediaAndSessionServer is the server API for MediaAndSession service.
// All implementations must embed UnimplementedMediaAndSessionServer
// for forward compatibility
type MediaAndSessionServer interface {
	GetSession(MediaAndSession_GetSessionServer) error
	SetSession(MediaAndSession_SetSessionServer) error
	GetMedia(MediaAndSession_GetMediaServer) error
	SetMedia(MediaAndSession_SetMediaServer) error
	mustEmbedUnimplementedMediaAndSessionServer()
}

// UnimplementedMediaAndSessionServer must be embedded to have forward compatible implementations.
type UnimplementedMediaAndSessionServer struct {
}

func (UnimplementedMediaAndSessionServer) GetSession(MediaAndSession_GetSessionServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSession not implemented")
}
func (UnimplementedMediaAndSessionServer) SetSession(MediaAndSession_SetSessionServer) error {
	return status.Errorf(codes.Unimplemented, "method SetSession not implemented")
}
func (UnimplementedMediaAndSessionServer) GetMedia(MediaAndSession_GetMediaServer) error {
	return status.Errorf(codes.Unimplemented, "method GetMedia not implemented")
}
func (UnimplementedMediaAndSessionServer) SetMedia(MediaAndSession_SetMediaServer) error {
	return status.Errorf(codes.Unimplemented, "method SetMedia not implemented")
}
func (UnimplementedMediaAndSessionServer) mustEmbedUnimplementedMediaAndSessionServer() {}

// UnsafeMediaAndSessionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MediaAndSessionServer will
// result in compilation errors.
type UnsafeMediaAndSessionServer interface {
	mustEmbedUnimplementedMediaAndSessionServer()
}

func RegisterMediaAndSessionServer(s grpc.ServiceRegistrar, srv MediaAndSessionServer) {
	s.RegisterService(&MediaAndSession_ServiceDesc, srv)
}

func _MediaAndSession_GetSession_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MediaAndSessionServer).GetSession(&mediaAndSessionGetSessionServer{stream})
}

type MediaAndSession_GetSessionServer interface {
	Send(*Session) error
	Recv() (*SessionID, error)
	grpc.ServerStream
}

type mediaAndSessionGetSessionServer struct {
	grpc.ServerStream
}

func (x *mediaAndSessionGetSessionServer) Send(m *Session) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mediaAndSessionGetSessionServer) Recv() (*SessionID, error) {
	m := new(SessionID)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MediaAndSession_SetSession_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MediaAndSessionServer).SetSession(&mediaAndSessionSetSessionServer{stream})
}

type MediaAndSession_SetSessionServer interface {
	Send(*SessionID) error
	Recv() (*Session, error)
	grpc.ServerStream
}

type mediaAndSessionSetSessionServer struct {
	grpc.ServerStream
}

func (x *mediaAndSessionSetSessionServer) Send(m *SessionID) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mediaAndSessionSetSessionServer) Recv() (*Session, error) {
	m := new(Session)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MediaAndSession_GetMedia_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MediaAndSessionServer).GetMedia(&mediaAndSessionGetMediaServer{stream})
}

type MediaAndSession_GetMediaServer interface {
	Send(*Media) error
	Recv() (*MediaID, error)
	grpc.ServerStream
}

type mediaAndSessionGetMediaServer struct {
	grpc.ServerStream
}

func (x *mediaAndSessionGetMediaServer) Send(m *Media) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mediaAndSessionGetMediaServer) Recv() (*MediaID, error) {
	m := new(MediaID)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MediaAndSession_SetMedia_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MediaAndSessionServer).SetMedia(&mediaAndSessionSetMediaServer{stream})
}

type MediaAndSession_SetMediaServer interface {
	Send(*MediaID) error
	Recv() (*Media, error)
	grpc.ServerStream
}

type mediaAndSessionSetMediaServer struct {
	grpc.ServerStream
}

func (x *mediaAndSessionSetMediaServer) Send(m *MediaID) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mediaAndSessionSetMediaServer) Recv() (*Media, error) {
	m := new(Media)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MediaAndSession_ServiceDesc is the grpc.ServiceDesc for MediaAndSession service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MediaAndSession_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dbapis.MediaAndSession",
	HandlerType: (*MediaAndSessionServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSession",
			Handler:       _MediaAndSession_GetSession_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SetSession",
			Handler:       _MediaAndSession_SetSession_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetMedia",
			Handler:       _MediaAndSession_GetMedia_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SetMedia",
			Handler:       _MediaAndSession_SetMedia_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "dbapi.proto",
}
